cmake_minimum_required(VERSION 3.22)
project(YOLOv8_TensorRT_CPP)

# Use ccache to speed up rebuilds
include(cmake/ccache.cmake)

# Set C++ version and optimization level
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Ofast -DNDEBUG -Wno-deprecated-declarations")

# CMake Options
option(ENABLE_BENCHMARKS "Benchmark the preprocessing, inference, and post processing" OFF)
if (ENABLE_BENCHMARKS)
    add_compile_definitions(ENABLE_BENCHMARKS)
endif()

find_package(OpenCV REQUIRED)
find_package(vpi 3.2 REQUIRED)

# TODO: Specify the path to TensorRT root dir
set(TensorRT_DIR /home/cyrus/work/libs/TensorRT-10.0.0.6/)

# Build the TensorRT inference engine library
# TensorRT is found and linked by the tensorrt-cpp-api
add_subdirectory(libs/tensorrt-cpp-api)

# Build the YoloV8 library
add_library(YoloV8_TRT SHARED src/yolov8.cpp)
target_link_libraries(YoloV8_TRT PUBLIC tensorrt_cpp_api ${OpenCV_LIBS})
target_include_directories(YoloV8_TRT PUBLIC libs/tensorrt-cpp-api/src)

# Build and link the executables
add_executable(detect_object_image src/object_detection_image.cpp)
target_link_libraries(detect_object_image YoloV8_TRT)

add_executable(benchmark src/benchmark.cpp)
target_link_libraries(benchmark YoloV8_TRT)

add_executable(detect_object_video src/object_detection_video_stream.cpp)
target_link_libraries(detect_object_video YoloV8_TRT)

<<<<<<< Updated upstream
add_executable(detect_object_camera src/object_detection_camera_stream.cpp)
target_link_libraries(detect_object_camera YoloV8_TRT)

# Enable debugging flags
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
=======
add_executable(detect_object_csi_jetson src/object_detection_csi_jetson.cpp)
target_link_libraries(detect_object_csi_jetson YoloV8_TRT)

add_executable(track_object src/object_tracking_jetson.cpp)
target_link_libraries(track_object YoloV8_TRT vpi ${OpenCV_LIBS} opencv_core
opencv_imgproc opencv_imgcodecs opencv_videoio)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
>>>>>>> Stashed changes
